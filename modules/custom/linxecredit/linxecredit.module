<?php

/**
 * @file
 * Contains linxecredit.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

use Drupal\linxecredit\Libs\FestivosLibrary as FestivosLibrary;

/**
 * Implements hook_help().
 */
function linxecredit_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the linxecredit module.
    case 'help.page.linxecredit':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This show the code package generated.') . '</p>';
      return $output;

    default:
  }
}

function linxecredit_theme() {
  
  $theme['simuladorhome_block'] = [
    'variables' => ['name' => NULL,'gl_cantidad_min' => NULL,'gl_cantidad_max' => NULL,'gl_meses_min' => NULL,'gl_meses_max' => NULL,'gl_tasa' => NULL,'gl_seguro' => NULL,'gl_cuota' => NULL],
    'template' => 'block/simuladorhome',
  ];
  $theme['adelantohome_block'] = [
    'variables' => ['name' => NULL,'adelantonomina_rangos' => NULL,'adelantonomina_montos_adelanto' => NULL,'adelantonomina_montos_salario' => NULL,'valor_min_an'=> NULL,'valor_med_default_an'=> NULL,'valor_max_an'=> NULL,'valor_adelanto_default_an'=> NULL],
    'template' => 'block/adelantohome',
  ];
  $theme['linxelogintheme_form'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];
  $theme['linxeregistertheme_form'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];
  $theme['linxepasswordtheme_form'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];
  $theme['message_response'] = [
    'variables' => ['titlemsg' => NULL,'message' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'labelbutton' => NULL],
    'template' => 'messageresponse',
  ];

  $theme['dashboard_seleccion'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'userObj'=> NULL,'instruccionmsg'=>NULL,'valormontoaprobado'=> NULL],
    'template' => 'dashboard_seleccion',
  ];

  $theme['dashboard_contrato'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'userObj'=> NULL,'valorseleccionado'=> NULL,'plazoseleccionado'=> NULL,'instruccionmsg'=>NULL,'urlpdf'=> NULL],
    'template' => 'dashboard_contrato',
  ];
  $theme['linxefirmacontratotheme_form'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];

  $theme['dashboard_desembolso'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'userObj'=> NULL,'valorseleccionado'=> NULL,'plazoseleccionado'=> NULL,'instruccionmsg'=>NULL,'imagenmsg'=> NULL,'textomsg'=> NULL],
    'template' => 'dashboard_desembolso',
  ];

  $theme['dashboard_miscreditos'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'userObj'=> NULL,'misCreditosArray'=> NULL,'valormontoaprobado'=> NULL],
    'template' => 'dashboard_miscreditos',
  ];

  $theme['linxeinfopersonaltheme_form'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];
  $theme['preferenciastheme_form'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];
  $theme['terminoscredito_block'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'infoObj'=> NULL],
    'template' => 'block/terminoscredito',
  ];
  $theme['botoneslogin_block'] = [
    'variables' => ['islogin' => NULL,'tipoproducto' => NULL],
    'template' => 'block/botoneslogin',
  ];
  $theme['linxeremembertheme_form'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];
  $theme['linxerecoverypasstheme_form'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];
  $theme['linxepopuptheme_form'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];

  $theme['dashboard_adelanto'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'userObj'=> NULL,'instruccionmsg'=>NULL,'valormontoaprobado'=> NULL],
    'template' => 'dashboard_adelanto',
  ];
  $theme['terminosadelanto_block'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'infoObj'=> NULL],
    'template' => 'block/terminosadelanto',
  ];
  $theme['dashboard_misadelantos'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'userObj'=> NULL,'misAdelantosArray'=> NULL,'valormontoaprobado'=> NULL],
    'template' => 'dashboard_misadelantos',
  ];
  $theme['dashboard_contrato_adelanto'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'userObj'=> NULL,'valorseleccionado'=> NULL,'plazoseleccionado'=> NULL,'instruccionmsg'=>NULL,'urlpdf'=> NULL],
    'template' => 'dashboard_contrato_adelanto',
  ];
  $theme['linxefirmapagaretheme_form'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];

  $theme['dashboard_datosempresa'] = [
    'render element' => 'form',
    'arguments'      => array('ppp' => NULL),
  ];
  $theme['dashboard_desembolsoadelanto'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'userObj'=> NULL,'valorseleccionado'=> NULL,'instruccionmsg'=>NULL,'imagenmsg'=> NULL,'textomsg'=> NULL,'textomsg2'=> NULL],
    'template' => 'dashboard_desembolsoadelanto',
  ];
  $theme['firmaterminosadelanto_block'] = [
    'variables' => ['name' => NULL,'paththeme'=> NULL,'basepath'=> NULL,'infoObj'=> NULL],
    'template' => 'block/firmaterminosadelanto',
  ];

  return $theme;
}



/**
* Implements hook_mail().
*/
function linxecredit_mail($key, &$message, $params) {
   $options = array(
     'langcode' => $message['langcode'],
   );
   switch ($key) {
    case 'registro':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['subject']), $options);
      $message['body'][] = $params['message'];
     break;
    case 'error_msg':
      //$message['headers']['Bcc'] = $params['Bcc'];
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['subject']), $options);
      $message['body'][] = $params['body'];
    break;
    case 'success_msg':
      //$message['headers']['Bcc'] = $params['Bcc'];
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['subject']), $options);
      $message['body'][] = $params['body'];
    break;
   }
}


function buscarDiaHabilEmpresa($nit)
{
  $arrayRangosCorteEmpresas = array(
    ["dia_habil"=>2,"minimo"=>0,"maximo"=>7],
    ["dia_habil"=>3,"minimo"=>8,"maximo"=>14],
    ["dia_habil"=>4,"minimo"=>15,"maximo"=>21],
    ["dia_habil"=>5,"minimo"=>22,"maximo"=>28],
    ["dia_habil"=>6,"minimo"=>29,"maximo"=>35],
    ["dia_habil"=>7,"minimo"=>36,"maximo"=>42],
    ["dia_habil"=>8,"minimo"=>43,"maximo"=>49],
    ["dia_habil"=>9,"minimo"=>50,"maximo"=>56],
    ["dia_habil"=>10,"minimo"=>57,"maximo"=>63],
    ["dia_habil"=>11,"minimo"=>64,"maximo"=>69],
    ["dia_habil"=>12,"minimo"=>70,"maximo"=>75],
    ["dia_habil"=>13,"minimo"=>76,"maximo"=>81],
    ["dia_habil"=>14,"minimo"=>82,"maximo"=>87],
    ["dia_habil"=>15,"minimo"=>88,"maximo"=>93],
    ["dia_habil"=>16,"minimo"=>94,"maximo"=>99]
  );

  $ultimos2digitos = substr($nit, -2);
  $valorEntero = intval($ultimos2digitos,10);
  $diahabil = 0;

  
  foreach($arrayRangosCorteEmpresas as $rango)
  {
    
    if($valorEntero >= $rango["minimo"] && $valorEntero <= $rango["maximo"])
    {
      $diahabil = $rango["dia_habil"];
      break;
    }
  }

  return $diahabil;

}

function fechaDiaHabilMesActual($diahabil)
{
  $festivos = new FestivosLibrary();

  $arrayDiasFestivos = [];
  $today = date("Y-m-d");
  $anio = date("Y");
  $mes = date("m");
  $festivosAnio = $festivos->getFestivos($anio);
  // First day of the month.
  $firstDate = date('Y-m-01', strtotime($today));
  // Last day of the month.
  $lastDate = date('Y-m-t', strtotime($today));


  foreach($festivosAnio[$anio][$mes] as $key=>$value)
  {
    if($key<10)
      $dia = "0".$key;
    else
      $dia = $key;
    array_push($arrayDiasFestivos,$anio."-".$mes."-".$dia);
  }
  

  $diasHabiles = $festivos->getDiasHabiles($firstDate,$lastDate,$arrayDiasFestivos);
  
  $fechaHabil = "";

  //print_r($diasHabiles);
  for($i=0;$i<count($diasHabiles);$i++)
  {
    if($diahabil==($i+1))
    {
      $fechaHabil = $diasHabiles[$i];
      break;
    }
  }

  return $fechaHabil;
}
/**
* Implements hook_cron().
*/
function linxecredit_cron(){
  //$config = $this->config('linxecredit.settings');
  $paththeme = base_path().drupal_get_path('theme', 'linxe');
  $basepath = base_path();  

  $adelanto_dias_recordatorio_notificacion = \Drupal::config('linxecredit.settings')->get('linxecredit.adelanto_dias_recordatorio_notificacion');
  $adelanto_dias_eliminacion_solicitud = \Drupal::config('linxecredit.settings')->get('linxecredit.adelanto_dias_eliminacion_solicitud');

  $currentDate = date("Y-m-d H:i:s");
  $fechaNotificacion = date("Y-m-d H:i:s",strtotime($currentDate."- ".$adelanto_dias_recordatorio_notificacion." days")); 
  $fechaEliminacion = date("Y-m-d H:i:s",strtotime($currentDate."- ".$adelanto_dias_eliminacion_solicitud." days")); 

  //eliminacion después de los x días
  /*
  
    $arrayEstados = ["solicitada","seleccion_monto"];

    $query = db_delete('adelantos_nomina')
                  ->condition('estado_general_solicitud',  $arrayEstados , 'in')
                  ->condition('fecha_solicitud',$fechaEliminacion,'<=')
                  ->execute();  
  */
  //En lugar de eliminar las solicitudes después de x días se van a cambiar de estado
  /*
  $arrayEstados = ["solicitada","seleccion_monto"]; 
  $currentDate = date("Y-m-d H:i:s");
  $fields  = array(
      'estado_general_solicitud'   => 'rechazada',
      'fecha_solicitud'   => $currentDate
  );
  $update = db_update('adelantos_nomina')
            ->fields($fields)
            ->condition('estado_general_solicitud',  $arrayEstados , 'in')
            ->condition('fecha_solicitud',$fechaEliminacion,'<=')
            ->execute(); 
  */

  /**
   * Cambio de algoritmo para el rechazo de las solicitudes, ahora se hace por fecha de corte de mareigua.
   */
  //busco las empresas con convenio de adelanto aceptado
    //por cada empresa busco en cual rango Corte empresa esta
      //cuando encuentro el rango selecciono su día habil
        // ahora busco todas las solicitudes de adelanto de nomina con estado "solicitada","seleccion_monto" y cuya fecha de solicitud sea menor o igual al día habil de la empresa
        // estas solicitudes hay que actualizarlas al estado rechazada y actualizar su fecha de solicitud al día de hoy
  

  $query =  db_select('empresas','emp')
  ->fields('emp')
  ->condition('emp.estado_convenio', "aceptado" )
  ->execute();

  $empresasArray = $query->fetchAll();
  $fechaActual = date("Y-m-d");

  foreach ($empresasArray as $empresa) {
    $idempresa = $empresa->idempresa;
    $nit = $empresa->identificacion;
    $diahabil = buscarDiaHabilEmpresa($nit);
    $fechahabil = fechaDiaHabilMesActual($diahabil);
    
    if($fechaActual > $fechahabil)
    {
      echo "<br>Nit:".$nit."  -  ".$diahabil ."  -  ".$fechahabil;
      $fechaHoraActual =  date("Y-m-d")." 00:00:00";  //se tienen en cuenta las solicitudes  con la fecha actual a las 0 horas, es decir un dia antes del corte de la empresa
      //$fechaHoraActual =  "2020-11-16 00:00:00";
      $arrayEstadosPermitidos = ["solicitada","seleccion_monto"];

      $fechaHoraHabil = $fechahabil." 23:59:59";

      $query = db_select('adelantos_nomina','an');
      $query->join('registrados_an', 'reg', 'an.idregistro = reg.idregistro');
      $query->fields('an');
      $query->fields('reg',["tipodocumento","documento"]);
      $query->condition('an.estado_general_solicitud',$arrayEstadosPermitidos,"in");
      $query->condition('an.fecha_solicitud',$fechaHoraHabil,"<=");
      $query->condition('reg.idempresa',$idempresa);
      $result = $query->execute();

      $arrayAdelantosARechazar = [];
      foreach($result as $solicitudAN){
        $idadelanto = $solicitudAN->idadelanto;
        $arrayAdelantosARechazar[] = $idadelanto;
      }

      print_r($arrayAdelantosARechazar);
      $currentDate = date("Y-m-d H:i:s");
      $fields  = array(
          'estado_general_solicitud'   => 'rechazada',
          'fecha_solicitud'   => $currentDate
      );
      for($j=0;$j<count($arrayAdelantosARechazar);$j++)
      {
        $update = db_update('adelantos_nomina')
                  ->fields($fields)
                  ->condition('idadelanto',  $arrayAdelantosARechazar[$j] , '=')
                  ->execute(); 
      }
    }
    
    
      
    
    
  }
 
  

                  
  
  //envío de la notificación

  $db_or = db_or();
  $db_or->condition('an.envio_recordatorio', "no");
  $db_or->isNull('an.envio_recordatorio');
  $query =  db_select('adelantos_nomina','an')
                  ->fields('an')
                  ->condition('an.estado_general_solicitud', $arrayEstados , 'in')
                  ->condition('an.fecha_solicitud',$fechaNotificacion,'<=')
                  ->condition($db_or)
                  ->execute();

  $solicitudesArray = $query->fetchAll();

  //if(is_array($transactionsArray))
  
  foreach ($solicitudesArray as $solicitud) {
    $idregistro = $solicitud->idregistro;
    
    $arrayRegistro = [];
    
    // registro
    $query = db_select('registrados_an', 'an')
            ->condition('an.idregistro', $idregistro , '=')
            ->fields('an')
            ->execute();
    $result = $query->fetchAll();
    foreach ($result as $record) {
      foreach($record as $key => $value)
      {
        $arrayRegistro[$key] = $value;
      }
    }
    $titleMsg = "LINXE - ¡Estás a un paso de disponer de tu dinero!";
    $mensaje = "<p>Estimado/a ".$arrayRegistro["nombre"]." ".$arrayRegistro["primer_apellido"]."</p>";
    $mensaje .= "<p>Solo falta que aceptes los términos y condiciones del producto e ingreses unos datos adicionales para que puedas contar con el dinero en tu cuenta.</p><br/>";
    $mensaje .= "<p>Si deseas continuar haz clic acá <a href='https://www.linxe.com' target='_blank'>www.linxe.com</a>.</p>";
    $mensaje .= "<p>Gracias.</p>";
    $mensaje .= "<p>Equipo Linxe.</p>";
    $emailto = $arrayRegistro["email"];
    $resultmail = sendNotification($titleMsg,$mensaje,$emailto);

    $arrayFieldsAN["envio_recordatorio"] = "si";
    $update = db_update('adelantos_nomina')
								->fields($arrayFieldsAN)
								->condition('idadelanto', $solicitud->idadelanto , '=')
								->execute();

  }

  
}

function sendNotification($titleMsg,$mensaje,$emailto)
{
  

  $paththeme = base_path().drupal_get_path('theme', 'linxe');
  $dominioactual = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http") . "://$_SERVER[HTTP_HOST]";
          
  $template_str = '
  <div >
    <center>
      <img src="'.$dominioactual.$paththeme.'/images/forms/exito.jpg" alt="LINXE"   width="130"/>
      <h2 class="text1">YA TIENES CASI TODO LISTO</h2>
      <div class="mensaje">
      '.$mensaje.'
      </div>
    </center>
  </div> ';

  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'linxecredit';
  $key = 'success_msg';
  $to = $emailto;
  //$params['Bcc'] = $config->get('contactopermodule.emailcc');;
  $params['body'] = $template_str;
  $params['subject'] = $titleMsg;
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = true;
  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
  if ($result['result'] !== true) {
    return false;
  }else {
    return true;
  }
}